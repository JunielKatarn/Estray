/**
 * @file async_server.cpp
 */

/*
 * The following license applies to the code in this file:
 *
 * **************************************************************************
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * **************************************************************************
 *
 * Author: Dr. RÃ¼diger Berlich of Gemfony scientific UG (haftungsbeschraenkt)
 * See http://www.gemfony.eu for further information.
 *
 * This code is based on the Beast Websocket library by Vinnie Falco, as published
 * together with Boost 1.66 and above. For further information on Beast, see
 * https://github.com/boostorg/beast for the latest release, or download
 * Boost 1.66 or newer from http://www.boost.org .
 */

#include "async_websocket_server.hpp"

/******************************************************************************************/
////////////////////////////////////////////////////////////////////////////////////////////
/******************************************************************************************/

async_websocket_client::async_websocket_client(
	const std::string& address
	, unsigned short port
)
	: m_address(address)
   , m_port(port)
{
	// Set the auto_fragment option, so control frames are delivered timely
	m_ws.auto_fragment(true);
	m_ws.write_buffer_size(16384);

	// Set the transfer mode according to the defines in CMakeLists.txt
	set_transfer_mode(m_ws);
}

/******************************************************************************************/

void async_websocket_client::run() {
	// Start looking up the domain name. This call will return immediately,
	// when_resolved() will be called once the operation is complete.
	m_resolver.async_resolve(
		m_address
		, std::to_string(m_port)
		, std::bind(
			&async_websocket_client::when_resolved
			, shared_from_this()
			, std::placeholders::_1
			, std::placeholders::_2
		)
	);

	// This call will block until no more work remains in the ASIO work queue
	m_io_context.run();

	// Finally close all outstanding connections
	std::cout << "async_websocket_client::async_start_run(): Closing down remaining connections" << std::endl;
	do_close(m_close_code);
}

/******************************************************************************************/

void async_websocket_client::when_resolved(
	boost::system::error_code ec
	, const resolver::results_type &results
) {
	if(ec) {
		std::cout
			<< "In async_websocket_client::when_resolved():" << std::endl
		   << "Got ec(\"" << ec.message() << "\"). async_connect() will not be executed." << std::endl
			<< "This will terminate the client." << std::endl;

		// Give the audience a hint why we are terminating
		m_close_code = boost::beast::websocket::close_code::going_away;

		return;
	}

	// Make the connection on the endpoint we get from a lookup
	boost::asio::async_connect(
		m_ws.next_layer()
		, results.begin()
		, results.end()
		, std::bind(
			&async_websocket_client::when_connected
			, shared_from_this()
			, std::placeholders::_1
		)
	);
}

/******************************************************************************************/

void async_websocket_client::when_connected(boost::system::error_code ec) {
	if(ec) {
		std::cout
			<< "In async_websocket_client::when_connected():" << std::endl
			<< "Got ec(\"" << ec.message() << "\"). async_handshake() will not be executed." << std::endl
			<< "This will terminate the client." << std::endl;

		// Give the audience a hint why we are terminating
		m_close_code = boost::beast::websocket::close_code::going_away;

		return;
	}

	// Perform the handshake
	m_ws.async_handshake(
		m_address
		, "/"
		, std::bind(
			&async_websocket_client::when_handshake_complete
			, shared_from_this()
			, std::placeholders::_1
		)
	);
}

/******************************************************************************************/

void async_websocket_client::when_handshake_complete(boost::system::error_code ec) {
	if(ec) {
		std::cout
			<< "In async_websocket_client::when_handshake_complete():" << std::endl
			<< "Got ec(\"" << ec.message() << "\"). async_start_write() will not be executed." << std::endl
			<< "This will terminate the client." << std::endl;

		// Give the audience a hint why we are terminating
		m_close_code = boost::beast::websocket::close_code::going_away;

		// This will terminate the client
		return;
	}

	// Send the first command to the server
	async_start_write(create_command_payload(payload_command::GETDATA));
}

/******************************************************************************************/

void async_websocket_client::async_start_write(const std::string& message) {
	// We need to persist the message for asynchronous operations.
	// It is hence stored in a class variable.
	m_outgoing_message = message;

	// Send the message
	m_ws.async_write(
		boost::asio::buffer(m_outgoing_message)
		, std::bind(
			&async_websocket_client::when_written
			, shared_from_this()
			, std::placeholders::_1
			, std::placeholders::_2
		)
	);
}

/******************************************************************************************/

void async_websocket_client::when_written(
	boost::system::error_code ec
	, std::size_t /* nothing */
) {
	if(ec) {
		std::cout
			<< "In async_websocket_client::when_written():" << std::endl
			<< "Got ec(\"" << ec.message() << "\"). async_start_read() will not be executed." << std::endl
			<< "This will terminate the client." << std::endl;

		// Give the audience a hint why we are terminating
		m_close_code = boost::beast::websocket::close_code::going_away;

		// This will terminate the client
		return;
	}

	// Clear the outgoing message -- no longer needed
	m_outgoing_message.clear();

	// Read the next message
	async_start_read();
}

/******************************************************************************************/

void async_websocket_client::async_start_read() {
	m_ws.async_read(
		m_incoming_buffer
		, std::bind(
			&async_websocket_client::when_read
			, shared_from_this()
			, std::placeholders::_1
			, std::placeholders::_2
		)
	);
}

/******************************************************************************************/

void async_websocket_client::when_read(
	boost::system::error_code ec
	, std::size_t /* nothing */
) {
	if(ec) {
		std::cout
			<< "In async_websocket_client::when_read():" << std::endl
			<< "Got ec(\"" << ec.message() << "\"). async_start_write() will not be executed." << std::endl
			<< "This will terminate the client." << std::endl;

		// Give the audience a hint why we are terminating
		m_close_code = boost::beast::websocket::close_code::going_away;

		// This will terminate the client
		return;
	}

	// Deal with the message and send a response back. Processing
	// of work items is done inside of process_request().
	try {
		async_start_write(process_request());
	} catch(...) {
		// Give the audience a hint why we are terminating
		m_close_code = boost::beast::websocket::close_code::internal_error;
	}
}

/******************************************************************************************/

std::string async_websocket_client::process_request() {
	// Extract the string from the buffer
	auto message = boost::beast::buffers_to_string(m_incoming_buffer.data());

	// De-serialize the object
	payload_base *plb_ptr;
	try {
		plb_ptr = from_string(message);
	} catch(...) {
		throw std::runtime_error("async_websocket_server_session::process_request(): Caught exception while de-serializing");
	}

	// Clear the buffer, so we may later fill it with data to be sent
	m_incoming_buffer.consume(m_incoming_buffer.size());

	// Extract the command
	auto inboundCommand = plb_ptr->get_command();

	// Act on the command received
	switch(inboundCommand) {
		case payload_command::COMPUTE: {
			// Elevate the pointer to a processible_payload
			auto *pp_ptr = dynamic_cast<processible_payload *>(plb_ptr);

			// Process it. This is where the actual work is done.
			pp_ptr->process();

			// Set the command for the way back to the server
			pp_ptr->set_command(payload_command::RESULT);

			// Serialize the object again and return the result. Note that we
			// must use the base pointer here.
			auto processed_item_str = to_string(plb_ptr);

			// Get rid of the work item
			delete plb_ptr;

			// Return the result
			return processed_item_str;
		} break;

		case payload_command::NODATA: // This must be a command payload
		case payload_command::ERROR: { // We simply ask for new work
			// sleep for a short while (between 10 and 50 milliseconds, randomly),
			// before we ask for new work.
			std::uniform_int_distribution<> dist(10, 50);
			std::this_thread::sleep_for(std::chrono::milliseconds(dist(m_rng_engine)));

			if(plb_ptr->get_payload_type() == payload_type::command) {
				// Just re-use the existing object
				plb_ptr->set_command(payload_command::GETDATA);
				auto command_item_str = to_string(plb_ptr);
				delete plb_ptr;
				return command_item_str;
			} else {
				// Get rid of the old object and return a new command item
				delete plb_ptr;
				return create_command_payload(payload_command::GETDATA);
			}
		} break;

		default: {
			throw std::runtime_error(
				"async_websocket_client::process_request(): Got unknown or invalid command " + boost::lexical_cast<std::string>(inboundCommand)
			);
		} break;
	}
}

/******************************************************************************************/

void async_websocket_client::do_close(close_code cc) {
	if(m_ws.is_open()) {
		m_ws.close(cc);
	}

	if(m_ws.next_layer().is_open()) {
		boost::system::error_code ec;

		m_ws.next_layer().shutdown(socket::shutdown_both, ec);
		m_ws.next_layer().close(ec);

		if(ec) {
			std::cout
				<< "In async_websocket_client::do_close():" << std::endl
				<< "Got ec(\"" << ec.message() << "\")." << std::endl
				<< "We will throw an exception, as there are no other options left" << std::endl;

			// Not much more we can do
			throw std::runtime_error("async_websocket_client::do_close(): Shutdown of next layer has failed");
		}
	}
}

/******************************************************************************************/
////////////////////////////////////////////////////////////////////////////////////////////
/******************************************************************************************/

async_websocket_server_session::async_websocket_server_session(
	boost::asio::ip::tcp::socket socket
	, std::function<bool(payload_base*& plb_ptr)> get_next_payload_item
	, std::function<bool()> check_stopped
	, std::function<void(bool)> sign_on
)
	: m_ws(std::move(socket))
	, m_strand(m_ws.get_executor())
	, m_timer(m_ws.get_executor().context(), (std::chrono::steady_clock::time_point::max)())
	, m_get_next_payload_item(std::move(get_next_payload_item))
	, m_check_stopped(std::move(check_stopped))
	, m_sign_on(std::move(sign_on))
{
	// Set the auto_fragment option, so control frames are delivered timely
	m_ws.auto_fragment(true);
	m_ws.write_buffer_size(16384);

	// Set the transfer mode according to the defines in CMakeLists.txt
	set_transfer_mode(m_ws);
}

/******************************************************************************************/

async_websocket_server_session::~async_websocket_server_session() {
	std::cout << "async_websocket_server_session::async_websocket_server_session(): Closing down connection" << std::endl;
	this->do_close(m_close_code);
}

/******************************************************************************************/

void async_websocket_server_session::async_start_run() {
	// --------------------------------------------------------------------------
	// Connections and communication

	async_start_accept();

	// --------------------------------------------------------------------------
	// Prepare ping cycle. It must start after the handshake, upon whose
	// completion the when_connection_accepted() function is called.
	// async_start_ping() is executed from there.

	// Set a control-frame callback
	f_when_control_frame_arrived
		= [this](frame_type frame_t, string_view s) {
		if(
			// We might have received a pong as an answer to a our own ping,
			// or someone might be sending us pings. In either case the line is active.
			boost::beast::websocket::frame_type::pong==frame_t
			|| boost::beast::websocket::frame_type::ping==frame_t
		) {
			// Note that the connection is alive
			this->m_ping_state = ping_state::CONNECTION_IS_ALIVE;
		}
	};

	// Set the callback to be executed on every incoming control frame.
	m_ws.control_callback(f_when_control_frame_arrived);

	// --------------------------------------------------------------------------
	// This function will terminate shortly after it was called, as all operations
	// are performed asynchronously.
}

/******************************************************************************************/

void async_websocket_server_session::async_start_ping() {
	// Set the timer
	m_timer.expires_after(m_ping_interval);

	// Start to wait asynchronously. This call will return immediately.
	// when_timer_fired() will be called once the timer has expired.
	m_timer.async_wait(
		boost::asio::bind_executor(
			m_strand
			, std::bind(
				&async_websocket_server_session::when_timer_fired
				, shared_from_this()
				, std::placeholders::_1
			)
		)
	);

	// Setting the ping state must be done before the ping is sent, or
	// else the pong might arrive before the SENDING_PING state is set
	// and we might overwrite the CONNECTION_IS_ALIVE state set by the
	// control-frame callback
	m_ping_state = ping_state::SENDING_PING;

	// Start the ping session
	m_ws.async_ping(
		m_ping_data
		, boost::asio::bind_executor(
			m_strand
			, std::bind(
				&async_websocket_server_session::when_ping_sent
				, shared_from_this()
				, std::placeholders::_1
			)
		)
	);
}

/******************************************************************************************/

void async_websocket_server_session::when_ping_sent(boost::system::error_code ec) {
	if(ec) {
		if(ec != boost::asio::error::operation_aborted) {
			std::cerr << "when_ping_sent: " << ec.message() << std::endl;
		}

		m_ping_state = ping_state::CONNECTION_IS_STALE;
	}
}

/******************************************************************************************/

void async_websocket_server_session::when_timer_fired(boost::system::error_code ec) {
	if(ec) {
		if(ec != boost::asio::error::operation_aborted) {
			std::cerr << "when_timer_fired: " << ec.message() << std::endl;
		}

		std::cout << "async_websocket_server_session::when_timer_fired(): Connection is dead" << std::endl;
		m_ping_state = ping_state::CONNECTION_IS_STALE;
		return;
	}

	if(m_ping_state == ping_state::CONNECTION_IS_ALIVE) {
		// Start the next ping session, if this is a healthy connection
		async_start_ping();
		return;
	} else {
		m_ping_state = ping_state::CONNECTION_IS_STALE;

		// Either this is a stale connection or the SENDING_PING flag is still set
		std::cout << "async_websocket_server_session::when_timer_fired(): Connection is dead: " << m_ping_state << std::endl;
		return;
	}
}

/******************************************************************************************/

void async_websocket_server_session::async_start_accept() {
	// This function initiates an asynchronous chain of callbacks, where each callback is
	// executed when the previous call (here: async_accept) is completed. Error handling is
	// done in the callback, using an error code provided by Boost.Beast and/or Boost.ASIO.
	m_ws.async_accept(
		boost::asio::bind_executor(
			m_strand
			, std::bind(
				&async_websocket_server_session::when_connection_accepted
				, shared_from_this()
				, std::placeholders::_1
			)
		)
	);
}

/******************************************************************************************/

void async_websocket_server_session::when_connection_accepted(boost::system::error_code ec) {
	if(ec) {
		std::cerr << "when_connection_accepted: "  << ec.message() << std::endl;

		m_close_code = boost::beast::websocket::close_code::going_away;

		return;
	}

	// Make it known to the server that a new session is alive
	m_sign_on(true);

	// Start reading an incoming message. This
	// call will return immediately.
	async_start_read();

	// Start the ping cycle
	async_start_ping();
}

/******************************************************************************************/

void async_websocket_server_session::async_start_read() {
	// Read a message into our buffer
	m_ws.async_read(
		m_incoming_buffer
		, boost::asio::bind_executor(
			m_strand
			, std::bind(
				&async_websocket_server_session::when_read
				, shared_from_this()
				, std::placeholders::_1
				, std::placeholders::_2
			)
		)
	);
}

/******************************************************************************************/

void async_websocket_server_session::when_read(
	boost::system::error_code ec
	, std::size_t /* nothing */
) {
	if(ec) {
		if(ec != boost::beast::websocket::error::closed) {
			std::cerr << "when_read: " << ec.message() << std::endl;
		}

		m_close_code = boost::beast::websocket::close_code::going_away;
	 	return;
	}

	// Deal with the message and send a response back
	try {
		async_start_write(process_request());
	} catch(...) {
		m_close_code = boost::beast::websocket::close_code::internal_error;
		return;
	}
}

/******************************************************************************************/

void async_websocket_server_session::async_start_write(const std::string& message) {
	// We need to persist the message for asynchronous operations
	m_outgoing_message = message;

	// Echo the message
	m_ws.async_write(
		boost::asio::buffer(m_outgoing_message)
		, boost::asio::bind_executor(
			m_strand
			, std::bind(
				&async_websocket_server_session::when_written
				, shared_from_this()
				, std::placeholders::_1
				, std::placeholders::_2
			)
		)
	);
}

/******************************************************************************************/

void async_websocket_server_session::when_written(
	boost::system::error_code ec
	, std::size_t /* nothing */
) {
	if(ec) {
		if(ec != boost::beast::websocket::error::closed) {
			std::cerr << "when_written: " << ec.message() << std::endl;
		}

		m_close_code = boost::beast::websocket::close_code::going_away;

		return;
	}

	// Clear the outgoing message -- no longer needed
	m_outgoing_message.clear();

	if(this->m_check_stopped()) {
		// Do not continue if a stop criterion was reached
		m_close_code = boost::beast::websocket::close_code::normal;
	} else {
		// Start another read cycle
		async_start_read();
	}
}

/******************************************************************************************/

void async_websocket_server_session::do_close(boost::beast::websocket::close_code cc) {
	// Make sure no more pings are sent
	m_timer.cancel();

	if(m_ws.is_open()) {
		// Close the connection
		m_ws.close(cc);
	}

	if(m_ws.next_layer().is_open()) {
		boost::system::error_code ec;

		// Closing the socket cancels all outstanding operations. They
		// will complete with boost::asio::error::operation_aborted
		m_ws.next_layer().shutdown(
			boost::asio::ip::tcp::socket::shutdown_both
			, ec
		);
		m_ws.next_layer().close(ec);

		if (ec) {
			std::cout
				<< "In async_websocket_server_session::do_close():" << std::endl
				<< "Got error code " << ec.message();

			// Not much more we can do
			throw std::runtime_error("async_websocket_server_session::do_close(): Shutdown of next layer has failed");
		}
	}

	// Make it known to the server that a session is leaving
	m_sign_on(false);
}

/******************************************************************************************/

std::string async_websocket_server_session::getAndSerializeWorkItem() {
	// Obtain a container_payload object from the queue, serialize it and send it off
	payload_base *plb_ptr = nullptr;
	if (this->m_get_next_payload_item(plb_ptr) && plb_ptr != nullptr) {
		plb_ptr->set_command(payload_command::COMPUTE);
		auto result = to_string(plb_ptr);
		delete plb_ptr; // we know sc is not a nullptr
		return result;
	} else {
		// Create a new command payload item. Note that we are using the base type here,
		// so the remote side can de-serialize it without prejudice.
		payload_base *cp_ptr = new command_payload(payload_command::NODATA);

		auto command_item_str = to_string(cp_ptr);

		// Get rid of the work item
		delete cp_ptr;

		// Return the result
		return command_item_str;
	}
}

/******************************************************************************************/

std::string async_websocket_server_session::process_request() {
	// Extract the string from the buffer
	auto message = boost::beast::buffers_to_string(m_incoming_buffer.data());

	// De-serialize the object
	payload_base *plb_ptr;
	try {
		plb_ptr = from_string(message);
	} catch(...) {
		throw std::runtime_error("async_websocket_server_session::process_request(): Caught exception while de-serializing");
	}

	// Clear the buffer, so we may later fill it with data to be sent
	m_incoming_buffer.consume(m_incoming_buffer.size());

	// Extract the command
	auto inboundCommand = plb_ptr->get_command();

	// Act on the command received
	switch(inboundCommand) {
		case payload_command::GETDATA:
		case payload_command::ERROR: {
			delete plb_ptr;
			return getAndSerializeWorkItem();
		} break;

		case payload_command::RESULT: {
#ifdef DEBUG
			// Elevate the pointer to a processible_payload
			auto *pp_ptr = dynamic_cast<processible_payload *>(plb_ptr);
			// Check that work was indeed done
			if(!pp_ptr->is_processed()) {
				throw std::runtime_error("async_websocket_server_session::process_request(): Returned payload is unprocessed");
			}
#endif

			// Get rid of the returned item
			delete plb_ptr;

			// Retrieve the next work item and send it to the client for processing
			return getAndSerializeWorkItem();
		} break;

		default: {
			delete plb_ptr;
			throw std::runtime_error(
				"async_websocket_server_session::process_request(): Got unknown or invalid command "
				   + boost::lexical_cast<std::string>(inboundCommand)
			);
		} break;
	}
}

/******************************************************************************************/
////////////////////////////////////////////////////////////////////////////////////////////
/******************************************************************************************/

async_websocket_server::async_websocket_server(
	const std::string& address
	, unsigned short port
	, std::size_t n_context_threads
	, std::size_t n_producer_threads
	, std::size_t n_max_packages_served
	, payload_type payload_type
	, std::size_t container_size
	, double sleep_time
)
	: m_endpoint(boost::asio::ip::make_address(address), port)
   , m_n_listener_threads(n_context_threads>0?n_context_threads:std::thread::hardware_concurrency())
   , m_n_max_packages_served(n_max_packages_served)
	, m_payload_type(payload_type)
	, m_n_producer_threads(n_producer_threads>0?n_producer_threads:std::thread::hardware_concurrency())
	, m_container_size(container_size)
	, m_sleep_time(sleep_time)
{ /* nothing */ }

/******************************************************************************************/

// Start accepting incoming connections
void async_websocket_server::run() {
	boost::system::error_code ec;

	// Reset the package counter
	m_n_packages_served = 0;

	// Indicate that the server may async_start_run
	m_server_stopped = false;

	// Open the acceptor
	m_acceptor.open(m_endpoint.protocol(), ec);
	if(ec || !m_acceptor.is_open()) {
		if(ec) { std::cerr << "async_start_run/m_acceptor.open: " << ec.message() << std::endl; }
		return;
	}

	// Bind to the server address
	m_acceptor.bind(m_endpoint, ec);
	if(ec) {
		std::cerr << "async_start_run/m_acceptor.bind: " << ec.message() << std::endl;
		return;
	}

	// Start listening for connections
	m_acceptor.listen(boost::asio::socket_base::max_listen_connections, ec);
	if(ec) {
		std::cerr << "async_start_run/m_acceptor.listen: " << ec.message() << std::endl;
		return;
	}

	// Start producers
	m_producer_threads_vec.reserve(m_n_producer_threads);
	switch(m_payload_type) {
		//------------------------------------------------
		case payload_type::container: {
			for (std::size_t i = 0; i < m_n_producer_threads; i++) {
				m_producer_threads_vec.emplace_back(
					std::thread(
						[this](std::size_t container_size){ this->container_payload_producer(container_size); }
						, m_container_size
					)
				);
			}
		} break;

		//------------------------------------------------
		case payload_type::sleep: {
			for (std::size_t i = 0; i < m_n_producer_threads; i++) {
				m_producer_threads_vec.emplace_back(
					std::thread(
						[this](double sleep_time) { this->sleep_payload_producer(sleep_time); }
						, m_sleep_time
					)
				);
			}
		} break;

		//------------------------------------------------
		case payload_type::command: { // This is a severe error
			throw std::runtime_error(R"(async_websocket_server::run(): Got invalid payload_type "command")");
		} break;

		//------------------------------------------------
	}


	//---------------------------------------------------------------------------
	// And ... action!

	// Will return immediately
	async_start_accept();

	// Allow to serve requests from multiple threads
	m_context_thread_vec.reserve(m_n_listener_threads-1);
	for(std::size_t t_cnt=0; t_cnt<(m_n_listener_threads-1); t_cnt++) {
		m_context_thread_vec.emplace_back(
			std::thread(
				[this](){
					this->m_io_context.run();
				}
			)
		);
	}

	// Block until all work is done
	m_io_context.run();

	//---------------------------------------------------------------------------
	// Wait for the server to shut down

	// Make sure the stop flag has really been set
	assert(true==this->m_server_stopped);

	// Wait for context threads to finish
	for (auto &t: m_context_thread_vec) { t.join(); }
	m_context_thread_vec.clear();

	// Wait for producer threads to finish
	for (auto &t: m_producer_threads_vec) { t.join(); }
	m_producer_threads_vec.clear();
}

/******************************************************************************************/

void async_websocket_server::async_start_accept() {
	m_acceptor.async_accept(
		m_socket,
		std::bind(
			&async_websocket_server::when_accepted
			, shared_from_this()
			, std::placeholders::_1
		)
	);
}

/******************************************************************************************/

void async_websocket_server::when_accepted(boost::system::error_code ec) {
	if(m_server_stopped) return;

	if(ec) {
		std::cerr << "when_connection_accepted: " << ec.message() << std::endl;
	} else {
		// Create the async_websocket_server_session and async_start_run it. This call will return immediately.
		std::make_shared<async_websocket_server_session>(
			std::move(m_socket)
			, [this](payload_base *&plb_ptr) -> bool { return this->getNextPayloadItem(plb_ptr); }
			, [this]() -> bool { return this->check_server_stopped(); }
			, [this](bool sign_on) {
				if(sign_on) {
					this->m_n_active_sessions++;
				} else {
					if(0 == this->m_n_active_sessions) {
						throw std::runtime_error("In async_websocket_server::when_accepted(): Tried to decrement #sessions which is already 0");
					} else {
						// This won't help, though, if m_n_active_sessions becomes 0 after the if-check
						this->m_n_active_sessions--;
					}
				}

				std::cout << this->m_n_active_sessions << " active sessions" << std::endl;
			}
		)->async_start_run();
	}

	// Accept another connection
	if(!this->m_server_stopped) async_start_accept();
}

/******************************************************************************************/

bool async_websocket_server::getNextPayloadItem(payload_base*& plb_ptr) {
	// Try to retrieve a work item
	bool success = m_payload_queue.pop(plb_ptr);

	// Update counters and the stop flag, if successful
	if(success) {
		if(m_n_packages_served++ >= m_n_max_packages_served){
			// Indicate to all parties that we want to stop
			m_server_stopped = true;
			// Stop accepting new connections
			m_acceptor.close();
			// Finally close the socket
			m_socket.shutdown(boost::asio::ip::tcp::socket::shutdown_both);
			m_socket.close();
		} else {
			if(m_n_packages_served%10 == 0) {
				std::cout << "async_websocket_server served " << m_n_packages_served << " packages" << std::endl;
			}
		}
	}

	// Let the audience know
	return success;
}

/******************************************************************************************/

bool async_websocket_server::check_server_stopped() const {
	return this->m_server_stopped;
};

/******************************************************************************************/

void async_websocket_server::container_payload_producer(std::size_t containerSize) {
	std::random_device nondet_rng;
	std::mt19937 mersenne(nondet_rng());
	std::normal_distribution<double> normalDist(0.,1.);

	bool produce_new_container = true;
	container_payload *sc_ptr = nullptr;
	while (!this->m_server_stopped) {
		using namespace std::literals;

		// Only create a new container if the old one was
		// successfully added to the queue
		if (produce_new_container) {
			sc_ptr = new container_payload(containerSize, normalDist, mersenne);
		}

		if (!m_payload_queue.push(sc_ptr)) { // Container could not be added to the queue
			produce_new_container = false;
			std::this_thread::sleep_for(5ms);
		} else {
			produce_new_container = true;
		}
	}
}

/******************************************************************************************/

void async_websocket_server::sleep_payload_producer(double sleep_time) {
	bool produce_new_container = true;
	sleep_payload *sp_ptr = nullptr;
	while (!this->m_server_stopped) {
		using namespace std::literals;

		// Only create a new container if the old one was
		// successfully added to the queue
		if (produce_new_container) {
			sp_ptr = new sleep_payload(sleep_time);
		}

		if (!m_payload_queue.push(sp_ptr)) { // Container could not be added to the queue
			produce_new_container = false;
			std::this_thread::sleep_for(5ms);
		} else {
			produce_new_container = true;
		}
	}
}

/******************************************************************************************/
////////////////////////////////////////////////////////////////////////////////////////////
/******************************************************************************************/
